name: Version or Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write  # for merging the PR and creating the release
  pull-requests: write # for creating the version PR

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    # Don't run on forks. We can and should only release from the main repo.
    if: github.repository == 'hirasso/rh-admin-utils'

    permissions:
      contents: write  # for Git to git push
      pull-requests: write # to allow creating PR

    name: Create Version PR or Publish

    runs-on: ubuntu-latest

    steps:
      - name: Configure Git
        run: |
          git config --global user.email "bot@rassohilber.com"
          git config --global user.name "Rasso Hilber's Bot"

      - name: Check out repository
        uses: actions/checkout@v4

      # Setup PNPM first, so that we use the cache in the next action
      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Require Build
        run: pnpm build

      # Run changesets action either if there are unreleased changesets (= a PR must be created)
      # or if the commit message matches the release PR (= new versions must be published to NPM)
      - name: Create changesets PR or Publish
        id: cs
        uses: changesets/action@v1
        with:
          title: '[CI] Release'
          commit: '[CI] Release'
          version: pnpm run version
          publish: pnpm run publish
        env:
          GITHUB_TOKEN: ${{ secrets.HIRASSO_ACTIONS_TOKEN }}

      - name: Checkout dist repo
        uses: actions/checkout@v3
        # GitHub Actions outputs are strings and the string 'false' converts to
        # `true` because it isn't the empty string.
        if: steps.cs.outputs.published == 'true'
        with:
          repository: hirasso/rh-admin-utils-dist
          ref: empty
          path: dist
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push bundles to dist repo
        # GitHub Actions outputs are strings and the string 'false' converts to
        # `true` because it isn't the empty string.
        if: steps.cs.outputs.published == 'true'
        # working-directory: dist
        run: |
          # Extract the version that was published or the empty string.
          echo "Checking if Package was published..."
          PACKAGE_VERSION=$(node ./scripts/logVersion.js)
          # Don't create a bundle commit if the package wasn't published.
          if [[ -z "$PACKAGE_VERSION" ]]; then
            echo "Package wasn't published, so bundles will not be pushed."
            exit 0
          fi
          echo "Package was published (${PACKAGE_VERSION}), so bundles will be pushed."
          echo "Checking out the empty root commit..."
          cd dist/
          git checkout --detach empty
          echo "Copying in all of the bundles..."
          cd ..
          cp -Rf assets src rh-admin-utils.php vendor-prefixed CHANGELOG.md README.md dist/
          cd dist/
          echo "Committing and pushing new bundles with tag 'v${PACKAGE_VERSION}'..."
          git add .
          git commit -m "Bundles for rh-admin-utils@${PACKAGE_VERSION}"
          git tag "v${PACKAGE_VERSION}"
          git push origin "v${PACKAGE_VERSION}"
          echo "Done."